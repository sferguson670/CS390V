> (define vecadd
    (lambda (a b)
      (cond
        [(null? a) b]
        [(null? b) a]
        [else (cons (+ (car a) (car b)) (vecadd (cdr a) (cdr b)))]
        )))

> (define vecfn
      (lambda (op a b)
        (cond 
          [(null? a) b]
          [(null? b) a]
          [(eqv? op -) (cons (- (car a) (car b)) (vecfn - (cdr a) (cdr b)))]
          [(eqv? op +) (vecadd a b)]
          [(eqv? op /) (cons (/ (car a) (car b)) (vecfn / (cdr a) (cdr b)))]
          [(eqv? op *) (cons (* (car a) (car b)) (vecfn * (cdr a) (cdr b)))]
          [else (display 'oops)]
          )))

> (define-syntax vecfun
    (syntax-rules ()
      [(vecfun op a b)
       (let ([x op])
         (if (eqv? x +)
             (vecadd a b)
             (vecfn op a b)
             ))]
      ))