> (define vecadd
    (lambda (a b)
      (if (null? a)
          b
          (cons (+ (car a) (car b)) (vecadd (cdr a) (cdr b ))))))

> (define vecadd
    (lambda (a b)
      (cond
        [(null? a) b]
        [(null? b) a]
        [else (cons (+ (car a) (car b)) (vecadd (cdr a) (cdr b)))]
        )))

> (define vecfn
    (lambda (op a b)
      (cond 
        [(null? a) b]
        [(null? b) a]
        [(eqv? op -) (cons (- (car a) (car b)) (vecfn - (cdr a) (cdr b)))]
        [(eqv? op +) (cons (+ (car a) (car b)) (vecfn + (cdr a) (cdr b)))]
        [(eqv? op /) (cons (/ (car a) (car b)) (vecfn / (cdr a) (cdr b)))]
        [else (display 'oops)]
        )))

> (define-syntax vecfun
    (syntax-rules (+)
      [(vecfun + a b)
       (vecadd a b)]
      ))